{"name": "test_place_order", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=96.0.4664.45)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x00E86903+2517251]\n\tOrdinal0 [0x00E1F8E1+2095329]\n\tOrdinal0 [0x00D22710+1058576]\n\tOrdinal0 [0x00D48993+1214867]\n\tOrdinal0 [0x00D480DF+1212639]\n\tOrdinal0 [0x00D664D3+1336531]\n\tOrdinal0 [0x00D43A36+1194550]\n\tOrdinal0 [0x00D665BA+1336762]\n\tOrdinal0 [0x00D75BBF+1399743]\n\tOrdinal0 [0x00D6639B+1336219]\n\tOrdinal0 [0x00D427A7+1189799]\n\tOrdinal0 [0x00D43609+1193481]\n\tGetHandleVerifier [0x01015904+1577972]\n\tGetHandleVerifier [0x010C0B97+2279047]\n\tGetHandleVerifier [0x00F16D09+534521]\n\tGetHandleVerifier [0x00F15DB9+530601]\n\tOrdinal0 [0x00E24FF9+2117625]\n\tOrdinal0 [0x00E298A8+2136232]\n\tOrdinal0 [0x00E299E2+2136546]\n\tOrdinal0 [0x00E33541+2176321]\n\tBaseThreadInitThunk [0x761AFA29+25]\n\tRtlGetAppContainerNamedObjectPath [0x77687A7E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77687A4E+238]", "trace": "self = <testcases.test01_place_order.TestPlaceOrder object at 0x0000027A8715FD90>\ncustomer_login = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"356b1e6ecf00cbc1978c825c6ea964d6\")>\n\n    def test_place_order(self, customer_login):\n        driver = customer_login\n        # lp = LoginPage(driver)\n        # lp.get_url()\n        # lp.login(gp.username, gp.password)\n        sp = SearchBar(driver)\n        sp.search(yaml_data['search_keyword'])\n        ilp = ItemListPage(driver)\n        ilp.choose_categories_women()\n        sleep(3)\n        ilp.choose_price_high_to_low()\n        sleep(3)\n        ilp.choose_item()\n        idp = ItemDetailPage(driver)\n        idp.choose_color()\n        idp.choose_size()\n        idp.increase_quantity()\n        idp.click_add_to_bag_button()\n        sleep(3)\n        sb = SearchBar(driver)\n        sb.click_view_bag()\n        sbp = ShoppingBagPage(driver)\n        sbp.click_decrease_item()\n        bp = BasePage(driver)\n        bp.scroll(\"scroll(0,300)\")\n        sbp.click_include_gift_receipt()\n>       sbp.input_gift_message(yaml_data['gift_message'])\n\ntestcases\\test01_place_order.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\shopping_bag_page.py:35: in input_gift_message\n    self.input(self.gift_message, gift_message)\ncommon\\base_page.py:87: in input\n    self.locator(loc).send_keys(txt)\n..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:540: in send_keys\n    self._execute(Command.SEND_KEYS_TO_ELEMENT,\n..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:710: in _execute\n    return self._parent.execute(command, params)\n..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:424: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000027A871D41C0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77687A7E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77687A4E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=96.0.4664.45)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x00E86903+2517251]\nE       \tOrdinal0 [0x00E1F8E1+2095329]\nE       \tOrdinal0 [0x00D22710+1058576]\nE       \tOrdinal0 [0x00D48993+1214867]\nE       \tOrdinal0 [0x00D480DF+1212639]\nE       \tOrdinal0 [0x00D664D3+1336531]\nE       \tOrdinal0 [0x00D43A36+1194550]\nE       \tOrdinal0 [0x00D665BA+1336762]\nE       \tOrdinal0 [0x00D75BBF+1399743]\nE       \tOrdinal0 [0x00D6639B+1336219]\nE       \tOrdinal0 [0x00D427A7+1189799]\nE       \tOrdinal0 [0x00D43609+1193481]\nE       \tGetHandleVerifier [0x01015904+1577972]\nE       \tGetHandleVerifier [0x010C0B97+2279047]\nE       \tGetHandleVerifier [0x00F16D09+534521]\nE       \tGetHandleVerifier [0x00F15DB9+530601]\nE       \tOrdinal0 [0x00E24FF9+2117625]\nE       \tOrdinal0 [0x00E298A8+2136232]\nE       \tOrdinal0 [0x00E299E2+2136546]\nE       \tOrdinal0 [0x00E33541+2176321]\nE       \tBaseThreadInitThunk [0x761AFA29+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77687A7E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77687A4E+238]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: ElementNotInteractableException"}, "attachments": [{"name": "log", "source": "934515cb-8be7-4a03-9e9d-388aad5cf654-attachment.txt", "type": "text/plain"}], "start": 1650587515890, "stop": 1650587560898, "uuid": "8c5269e8-3318-4e4f-83d3-b003eb77e9b6", "historyId": "d74a51013c5dbc0c8d4ea8ee379a9c33", "testCaseId": "0ca0318dd4d1792bd58b467926c30aaf", "fullName": "testcases.test01_place_order.TestPlaceOrder#test_place_order", "labels": [{"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test01_place_order"}, {"name": "subSuite", "value": "TestPlaceOrder"}, {"name": "host", "value": "LAPTOP-FU74VF0U"}, {"name": "thread", "value": "12228-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test01_place_order"}]}